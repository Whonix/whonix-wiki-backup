{{Header}}
{{title|title=
Homepage Speed Tests
}}
{{#seo:
|description=Development of {{project_name_long}} Homepage
}}
{{Archived}}
__NOINDEX__
= ... =
Experimenting with the contents and speed of {{project_name_long}} homepage.

* Current homepage: [[About|Overview]]
* Copy of [[About|Overview]] as per 26.11.2014: [[Dev/Homepage/26.11.2014]]

= Testing Services Used =
* https://tools.pingdom.com
* https://gtmetrix.com

= Tests =
== Older Tests ==
<nowiki>https://github.com/Whonix/Whonix/issues/172</nowiki>

== 26.11.2014 ==
'''Using mediawiki 1.23.'''

=== whonix.org ===
Typing just "whonix.org" so redirections and https add up.

<blockquote>
This specific test was done on November 26 at 17:22:09 from Amsterdam, Netherlands. The web page took 2.82 s to load, used 43 requests, and weighed in at 493.2 kB.

The Google Page Speed performance grade for this web page is 93/100</blockquote>

<blockquote>
This specific test was done on November 26 at 17:23:58 from New York City, New York, USA. The web page took 4.66 s to load, used 43 requests, and weighed in at 493.2 kB.

The Google Page Speed performance grade for this web page is 93/100
</blockquote>

<blockquote>
This specific test was done on November 26 at 17:24:56 from Dallas, Texas, USA. The web page took 6.05 s to load, used 43 requests, and weighed in at 493.2 kB.

The Google Page Speed performance grade for this web page is 92/100
</blockquote>

=== https://www.whonix.org/wiki/Dev/Homepage/26.11.2014 ===
Using direct page link to remove redirections and https from equation.

<blockquote>
This specific test was done on November 26 at 17:44:49 from unknown. The web page took 7.62 s to load, used 40 requests, and weighed in at 491.3 kB.

The Google Page Speed performance grade for this web page is 92/100
</blockquote>

<blockquote>
 This specific test was done on November 26 at 17:46:30 from Dallas, Texas, USA. The web page took 4.46 s to load, used 40 requests, and weighed in at 491.3 kB.

The Google Page Speed performance grade for this web page is 94/100
</blockquote>

<blockquote>
40 Requests
462.3 KB
5.75s (onload: 6.06s)
</blockquote>

=== https://www.whonix.org/wiki/About ===
Comparison with a much simpler page that does not have an rss reader or a lot pictures.

<blockquote>
This specific test was done on November 26 at 17:27:51 from unknown. The web page took 2.55 s to load, used 21 requests, and weighed in at 276.2 kB.

The Google Page Speed performance grade for this web page is 90/100
</blockquote>

<blockquote>
22 Requests
259.6 KB
4.63s (onload: 4.97s)
</blockquote>

<blockquote>
21 Requests
259.6 KB
4.36s (onload: 4.71s)
</blockquote>

=== <nowiki>https://www.whonix.org/old-forum/</nowiki> ===
Comparison with {{project_name_long}} forums.

<blockquote>
This specific test was done on November 26 at 17:38:37 from unknown. The web page took 1.55 s to load, used 21 requests, and weighed in at 73.1 kB.

The Google Page Speed performance grade for this web page is 95/100
</blockquote>

<blockquote>
This specific test was done on November 26 at 17:39:35 from New York City, New York, USA. The web page took 1.38 s to load, used 21 requests, and weighed in at 73.1 kB.

The Google Page Speed performance grade for this web page is 95/100
</blockquote>

=== <nowiki><nowiki>https://www.whonix.org/blog/</nowiki></nowiki> ===
Comparison with {{project_name_long}} blog.

<blockquote>
This specific test was done on November 26 at 17:48:33 from Amsterdam, Netherlands. The web page took 1.35 s to load, used 10 requests, and weighed in at 90.0 kB.

The Google Page Speed performance grade for this web page is 100/100
</blockquote>

<blockquote>
10 Requests
83.2 KB
3.42s (onload: 4.06s)
</blockquote>

= 01.03.2015 =
* nginx &rarr; varnish &rarr; apache2
* no tweaks

== whonix.org ==
<blockquote>
This specific test was done on March 1 at 17:11:57 from Dallas, Texas, USA. The web page took 3.11 s to load, used 41 requests, and weighed in at 757.0 kB.

The Google Page Speed performance grade for this web page is 86/100
</blockquote>

<blockquote>
This specific test was done on March 1 at 17:46:53 from San Jose, California, USA. The web page took 4.33 s to load, used 41 requests, and weighed in at 756.9 kB.

The Google Page Speed performance grade for this web page is 86/100
</blockquote>

<blockquote>
Page load time: 4.55s
Total page size: 742KB
Total number of requests: 42
</blockquote>

== https://www.whonix.org/wiki/Dev/Homepage/26.11.2014 ==
<blockquote>
This specific test was done on March 1 at 17:46:04 from Stockholm, Sweden. The web page took 1.06 s to load, used 37 requests, and weighed in at 737.0 kB.

The Google Page Speed performance grade for this web page is 88/100
</blockquote>

<blockquote>
Page load time: 4.32s
Total page size: 723KB
Total number of requests: 38
</blockquote>

== https://www.whonix.org/wiki/About ==
<blockquote>
This specific test was done on March 1 at 17:48:01 from Stockholm, Sweden. The web page took 957 ms to load, used 19 requests, and weighed in at 546.1 kB.

The Google Page Speed performance grade for this web page is 88/100
</blockquote>

<blockquote>
Page load time: 3.62s
Total page size: 539KB
Total number of requests: 20
</blockquote>

== <nowiki>https://www.whonix.org/old-forum/</nowiki> ==
<blockquote>
This specific test was done on March 1 at 17:48:53 from Amsterdam, Netherlands. The web page took 226 ms to load, used 21 requests, and weighed in at 67.2 kB.

The Google Page Speed performance grade for this web page is 85/100
</blockquote>

<blockquote>
Page load time: 2.12s
Total page size: 58.5KB
Total number of requests: 20
</blockquote>

== <nowiki><nowiki>https://www.whonix.org/blog/</nowiki></nowiki> ==
<blockquote>
This specific test was done on March 1 at 17:50:00 from Dallas, Texas, USA. The web page took 1.11 s to load, used 38 requests, and weighed in at 111.2 kB.

The Google Page Speed performance grade for this web page is 88/100
</blockquote>

<blockquote>
Page load time: 2.25s
Total page size: 107KB
Total number of requests: 10
</blockquote>

= 12.03.2015 =
* nginx &rarr; varnish &rarr; apache2
* varnish vcl improvements, ocsp, session resumption, spdy

== whonix.org ==
<blockquote>
This specific test was done on March 12 at 23:43:35 from Dallas, Texas, USA. The web page took 2.16 s to load, used 40 requests, and weighed in at 439.1 kB.
</blockquote>

<blockquote>
Page load time: 3.75s
Total page size: 408KB
Total number of requests: 41
</blockquote>

== https://www.whonix.org/wiki/Dev/Homepage/26.11.2014 ==
<blockquote>
 This specific test was done on March 12 at 23:47:43 from Stockholm, Sweden. The web page took 1.53 s to load, used 36 requests, and weighed in at 418.0 kB.
</blockquote>

<blockquote>
Page load time: 3.93s
Total page size: 389KB
Total number of requests: 36
</blockquote>

== https://www.whonix.org/wiki/About ==
<blockquote>
This specific test was done on March 12 at 23:49:23 from Stockholm, Sweden. The web page took 533 ms to load, used 18 requests, and weighed in at 219.4 kB.
</blockquote>

<blockquote>
Page load time: 2.97s
Total page size: 205KB
Total number of requests: 19
</blockquote>

== <nowiki>https://www.whonix.org/old-forum/</nowiki> ==
<blockquote>
This specific test was done on March 12 at 23:50:44 from Amsterdam, Netherlands. The web page took 238 ms to load, used 21 requests, and weighed in at 75.6 kB.

The Google Page Speed performance grade for this web page is 98/100
</blockquote>

<blockquote>
Page load time: 2.13s
Total page size: 58.5KB
Total number of requests: 20
</blockquote>

== <nowiki><nowiki>https://www.whonix.org/blog/</nowiki></nowiki> ==
<blockquote>
This specific test was done on March 12 at 23:52:12 from Dallas, Texas, USA. The web page took 1.36 s to load, used 13 requests, and weighed in at 89.5 kB.

The Google Page Speed performance grade for this web page is 100/100
</blockquote>

<blockquote>
Page load time: 1.99s
Total page size: 80.3KB
Total number of requests: 11
</blockquote>

= misc =
https://www.whonix.org/wiki/Dev/Homepage/17.03.2015

= CodeSelect JavaScript Speed Issue =

* [https://phabricator.whonix.org/T420 CodeSelect template / widget unusably slow on big pages]
* https://www.whonix.org/w/index.php?title=KVM&oldid=18211 -- <nowiki>https://gtmetrix.com/reports/www.whonix.org/yJv9ZEO2</nowiki> -- 3,4 s
* https://www.whonix.org/w/index.php?title=KVM&oldid=18786 -- <nowiki>https://gtmetrix.com/reports/www.whonix.org/tvZ0qzS5</nowiki> -- 30,6 s

= 14.12.2021 =
<u>To first content (readable text!) visible in video.</u>

== wiki/VirtualBox ==
* Vancouver <nowiki>https://gtmetrix.com/reports/www.whonix.org/kTw2Dvn3/video</nowiki> 1,7 s
* London <nowiki>https://gtmetrix.com/reports/www.whonix.org/fnYMD2Ec/video</nowiki> 0,7 s

== homepage ==
* London <nowiki>https://gtmetrix.com/reports/whonix.org/I12hJQ1u/video</nowiki> 0,6 s

= 08.08.2022 =
* London https://www.whonix.org/wiki/Testpage-no-header-no-footer 1,1 s
** <nowiki>https://gtmetrix.com/reports/www.whonix.org/pevrlSPz/#video</nowiki>
* London https://www.whonix.org/wiki/Testpage-with-header-and-footer 1,3 s
** <nowiki>https://gtmetrix.com/reports/www.whonix.org/2y0ZdiAH/</nowiki>
* London https://www.whonix.org/wiki/Testpage-mass-headline-test#test_headline_50 1,3 s
** <nowiki>https://gtmetrix.com/reports/www.whonix.org/QMhjfReD/</nowiki>

= 23.11.2022 =
== end of year banner performance testing ==
It's been reported that the website got slower due to the end of year banner. Could you compare/check please?

'''DEV'''

* After the speedup (see task before) pages were tested again.

<div class="scroll-table">
{| class="wikitable"
! !!  Grade !! performace !! structure !! content paint !! total block !! content shift
|-

| Before (slow) || C || 70% || 94% || 3.6s || 0ms || 0%
|-

| After (faster) || B || 80% || 94% || 2.2s || 0ms || 0%
|-

| Without banner || B || 86% || 94% || 1.6s || 0ms || 0%
|-

|}
</div>

= 25.11.2022 =
=== download sub domain is very fast ===
Still using hetzer server. Still testing gtmetrix from London.

* <nowiki>https://gtmetrix.com/reports/download.kicksecure.com/xSUX9tow/#video</nowiki> 0.3 s / 151ms TTFB
** pagespeed: Initial server response time was short Root document took 140 ms
** <nowiki>https://pagespeed.web.dev/report?url=https%3A%2F%2Fdownload.kicksecure.com%2F</nowiki>
* <nowiki>https://gtmetrix.com/reports/download.whonix.org/jifLiJJv/</nowiki> 0.2 s
** pagespeed: Initial server response time was short Root document took 140 ms
** <nowiki>https://pagespeed.web.dev/report?url=https%3A%2F%2Fdownload.whonix.org%2F</nowiki>

=== hello.php ===
* <nowiki>https://gtmetrix.com/reports/www.kicksecure.com/h6FaRwcP/</nowiki> TTFB 130ms
* pagespeed: Initial server response time was short Root document took 110 ms

=== hello2.php ===
* pagespeed: Initial server response time was short Root document took 40 ms

=== Testpage-no-header-no-footer ===
https://www.kicksecure.com/wiki/Testpage-no-header-no-footer

* gtmetrix: 0.9 s
** <nowiki>https://gtmetrix.com/reports/www.kicksecure.com/oGas1t35/</nowiki>
* pagespeed: Initial server response time was short Root document took 420 ms

=== Comparison with Upstream MediaWiki ===
https://www.mediawiki.org/wiki/Extension:SSL_authentication

* gtmetrix: 0.3 s
** <nowiki>https://gtmetrix.com/reports/www.mediawiki.org/2wUII1Dc/</nowiki>
* pagespeed: Initial server response time was short Root document took 340 ms

= 25.12.2022 =

== wiki speed tests ==

===  Motivation ===
* google pagespeed: Discover what your real users are experiencing
* Core Web Vitals Assessment: Failed
* mobile FCP: 2.7 s
* desktop FCP: 2.1 s

=== summary and conclusions from above tests ===
* download.kicksecure.com and download.whonix.org (simple nginx autoindex generated single file html page) are very fast - 0.3 s / 151ms TTFB
* PHP is also very fast (tested with a hello world - kicksecure.com/w/hello.php script) - 0.2 s / 130ms TTFB
* So the server, location of the server and/or absence of a CDN cannot be the cause of Kicksecure / Whonix wiki slowness because above simple HTML and PHP pages are fast too.
* https://www.kicksecure.com/wiki/Testpage-no-header-no-footer takes 0.9 seconds before something is visible for the user. TTFB (time to first byte) is 420 ms)
** By comparison a simple wiki page in the MediaWiki https://www.mediawiki.org/wiki/Extension:SSL_authentication takes only 0.3 seconds. TTFB with 340 ms is a bit faster but that could either be a measurement tolerance, server location and probably does not explain why even simple Kicksecure / Whonix wiki pages are 3x slower.

=== comparison #2 ===
* complex but still fast website https://www.fandom.com/ 0.3 s FCP

=== ideas for future investigation ===
* compare with a freshly installed mediawiki
* compare with server caching enabled

=== Tests ===
* performed testing and comparing
* main result: The slowness of the pages might be simply due to the amount of data that is transferred

<div class="scroll-table">
{| class="wikitable"
! !! Whonix homepage !! Whonix testpage <br/>(no browser caching) !! Whonix testpage <br/>(with browser caching) || mediawiki.org simple !! download.whonix.org !! zerobounce.net
|-

| time || 1870 ms || 1420 ms || 536 ms || 294 ms || 76 ms || 1100 ms
|-

| FCP || 1.6 s || 0.9 s || 1.7 s || 0.3 s || 0.3 s || 0.3 s
|-

| data || 2.3 MB || 1.1 MB || 1.1 MB || 125 KB || 2 KB || 5.1 MB
|-

| files || 74 || 34 || 34 || 18 || 1 || 107
|-

| largest file || 198 KB <br> whonix-explainer.mp4 || 172 KB <br> Cousine-Regular.woff (font) || 172 KB <br> Cousine-Regular.woff (font) || 42 KB <br> load.php || 2 KB <br> index || 410 KB <br> 853704336.json
|-

|}
</div>

* It might be hard to improve on speed, because we have more functionality and therefore more files
* In the browser cached version our wiki is "only" 82% slower than the basic media wiki (browser caching does not seem to make much speed difference there). This might be tolerable
* Ideas for improvement
** Identify files which are not needed in particular loads. For example on the testpage some images are unnecessarily loaded. This process can take a while
** Make a lot features "lazy load". This is a new trend examplified by the new JS framework qwik. You load the JS or even the HTML only when you need it. This process would mean however that a lot of files are moved out of the autogen-files again and are loaded only when or if they are needed. This either complicates operations or takes a while - even longer than the previous suggestion. And the mw-combined files are also pretty small so there might not be so much saving potential here anyways.
* Also regarding the 536 ms for the testpage WITH browser cache : the real load time is about 215 ms. Then it takes a while to load the rest from disk cache. For example the favicon comes late (I don't know why) at about 460 ms from disk cache. And the images for the share-tooltip come late. That for example might be some small saving potential to not the the share-modal load the images if it's not needed. But again that would be option 2 "lazy load". There might be a "light" version of the task: only apply the search for lazy load to the heaviest loads or load with the most saving potential

= 20.01.2023 =

The hero image (web jargon: main image above the fold on landing page) needs to load quickly so Lighthouse (analysis tool for page loading) analysis gives a good feedback. This is important as an indicator how well the page loads for visitors.

A couple of tests were written and moved to the /test folder on kicksecure.com. These tests included
# having preview image and hero image with decoding=sync and loading=eager
# having preview image and hero image with decoding=async and loading=eager
# having preview image and hero image with decoding=sync and the preview loading=eager, but the main image loading=lazy
# using a background image on the image wrapper instead of a separate preview image
# using a background image on the hero image itself
# using a CSS gradient instead of a preview image
# having no preview image at all

Results with Google pageview (including Lighthouse)
* Tests 4-7 have 100% for best practices, tests 1-3 lack a little bit there
* Tests 1,2,4,7 have the best performance resuts. But that can vary if this test is performed multiple times
* Generally lazy loading the hero image is severely punished by the metric, because the LCP (largest contentful paint) is very much delayed by this practice (for the hero image)

Results with gtmetrix
* Tests 1,2,4,7 had a performance of 96%, 5 and 6 had 95%, but 3 had 81% due to bad LCD (due to lazy loading the hero image)
* Tests 1,2,4,5,6 had a structure of 93%, 7 had 90% and 3 had 85%
* LCP 1 through 7: 1.1s / 1.1s / 2.9s / 1.1s / 1.1s / 1.1s / 1.1s

= Footnotes =
[[Category:Development]]

{{Footer}}