{{Header}}
{{title|title=
{{project name long}} Threat Model
}}
{{#seo:
|description=Technical Design Documentation about {{project_name_long}} Threat Model. This document covers aspects like Attacker Capabilities, Goals, and Attack Surface.
}}
{{tech_intro_mininav}}
{{intro|
Technical Design Documentation about {{project_name_long}} Threat Model. This document covers aspects like Attacker Capabilities, Goals, and Attack Surface.
}}
== Classification of Threats ==

== Note ==

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [https://www.ietf.org/rfc/rfc2119.txt RFC 2119].

== The Threats ==

First, let's quickly consider all the possible threats we could face. We can categorize threats against computer systems into five categories:

; 1. '''Non-technical/non-computer-based and legal attacks'''
:* Examples include: 
::* "Rubber hose cryptanalysis"
::* Mandatory key disclosure
::* Subpoenas
::* Real detective work/espionage (done by real humans, not bots)
::* Bugs
::* Surveillance cameras

; 2. '''Hardware attacks through physical access'''
:* Examples include:
::* RAM and Hard disk Forensics
::* Keyloggers
::* TEMPEST
::* Evil Maid attacks

; 3. '''Backdoors'''
:* Intentional weaknesses or additional hidden "functionality" inserted into your system by a manufacturer, vendor, or distributor (hardware or software) allowing remote access<sup>1</sup>.
:* These can be introduced anywhere from:
::* Design/source code
::* Manufacturing/compilation
::* Distribution

; 4. '''Vulnerabilities'''
:* Coding or hardware design errors that can be exploited to gain remote access.<ref>Used in the broadest sense, vulnerabilities can manifest as remote code execution, privilege escalation, DoS, etc. Essentially, they all allow remote parties to send your system instructions that diverge from the established security policy.</ref>
:* In practice, vulnerabilities and backdoors can appear identical; only their creation methods differ.

; 5. '''Design flaws'''
:* Even in a system free of backdoors and errors, with perfect physical and legal protection (which doesn't exist in reality), achieving perfect security may still be elusive. 
:* This is particularly true for anonymity systems. 
::* While perfect cryptographic design exists (the one-time pad), anonymity isn't binary.
::* You're not simply anonymous or not; you possess some non-zero but imperfect degree of anonymity. 
::* Your anonymity hinges on blending in with others.
::* Anonymity networks necessitate trust and a sizable, diverse user base. 
::* A perfectly secure system wouldn't rely on trust in others or on such external factors.
::* Every complex (yet still usable) system design (all computer systems are complex) involves trade-offs. That's why the majority employ imperfect cryptography instead of the one-time-pad...

Lastly, it's worth noting that the bug mentioned in [https://gitlab.torproject.org/legacy/trac/-/issues/5928 Research: IP discovery through Tor behind isolated network] seems to primarily concern determining the IP address a Tor client uses to connect to the Internet. It does not touch upon other types of information leakage.

== Attacker capabilities ==

=== Legal/Non-technical "attacks" and physical access ===
* Legal/Non-technical "attacks" and physical access are expensive. Anything that requires real humans to work, rather than relying on computers and algorithms, is prohibitively expensive for more than a small target group.

=== Backdoors ===
* Both hardware and software backdoors are costly to implement. Creating one is difficult and comes with risks.
* The more frequently a backdoor is used, the more likely it will be detected and closed. Adversaries are unlikely to waste such tools on anything but high-profile targets.
* Well-hidden passive "backdoors" are concerning as they can be nearly impossible to detect and may remain functional for years.
* Consider a backdoor in a compiler affecting the PRNG. The cost of implementing such a backdoor is high, requiring patience, sophisticated coding, social engineering, and cryptography skills. However, the potential return on investment could be significant.

=== Software attacks ===
* Software attacks are economical. While a good 0-day exploit can be expensive and loses its usefulness once deployed, new vulnerabilities emerge regularly, and new exploits can be developed.
* Compared to physical access and backdoors, software attacks are more cost-effective and can be automated for a broad target set.
* If you question the significance or realism of the threat from client application 0-days, consider pwn2own 2012. A semi-legal, albeit questionable company, demonstrated their ability to exploit every web browser, bypassing all advanced security features (MAC, Sandbox, ASLR, NX, etc.).
* Such findings are not shocking, given that large codebases will always contain bugs, some of which are exploitable. What stands out is that this company doesn't disclose their findings to the software developers; instead, they sell this information to governments (or the highest bidder) as offensive "cyber weapons" (though they wouldn't term it as such). 
* It is plausible that vulnerabilities in Tor are also being sold discreetly. Therefore, one should never rely solely on Tor, especially when requiring robust anonymity from well-funded adversaries.

=== Crypto-attacks ===
* Crypto-attacks are extremely expensive. If one discovers a method to break the currently used encryption, they will likely keep it a secret.
* Most cryptographic attacks probably necessitate vast computing resources.

=== Attacking design flaws ===
* Attacking design flaws varies in cost. The expenses can differ significantly, but in every instance, once a design flaw is attacked and it becomes public knowledge, the target will rectify the flaw, making it tougher to exploit in the future.
* This dynamic could lead to an arms race, which neither party may desire.
* A significant issue for the defending party is that some systems have become so ubiquitous that transitioning to a more secure design is nearly impossible.
* A prime example is the certificate authority system. Its design has numerous flaws, but nearly every computer user relies on it for authentication and confidentiality.
* Similarly, the lack of crypto and hash agility in many applications results in dependence on fragile and compromised algorithms. This isn't due to ignorance but because of the demands of backward compatibility and the problems a few malicious actors can cause.
* There's a threshold where, if an attacker remains discreet, they can operate undetected for an extended period, giving everyone the impression that the situation isn't "that bad yet."
* For instance, a [https://en.wikipedia.org/wiki/Collision_attack#Attack_scenarios collision attack] against SHA-1, affecting various applications, including Tor, GPG, and TLS, has been deemed feasible for a potent adversary since 2005. With advances in technology and attack methods, the number of potential adversaries has only grown. SHA-1 will likely remain in widespread use until a collision is publicly demonstrated — not because we lack alternatives, but because the costs of transitioning are so steep.

== Our Goals ==

* '''Hiding our Location and Identity when transmitting information''': Ensuring that our physical location and personal or organizational identity remain anonymous when sending or receiving information. 

* '''Confidentiality, Integrity, Authenticity, and Availability of transmitted data''': 
** '''Confidentiality''': Ensuring that the data remains private and is only accessible to those intended to have access.
** '''Integrity''': Guaranteeing that the data remains unchanged during transmission, and no unauthorized alterations occur.
** '''Authenticity''': Verifying the source and destination of the data, confirming that it's coming from and going to legitimate entities.
** '''Availability''': Making sure that data remains accessible and retrievable when needed, especially during crucial moments.

== Our Attack Surface ==

Every component we utilize to achieve our goals presents a potential attack vector:

; '''Physical Security and Privacy''':
: Physical security and privacy are IMPERATIVE. Without them, achieving anonymity and confidentiality becomes challenging, if not impossible.

; '''Tor & Its Components''':
: When considering Tor — its code, design, and the entire network (refer to [[Dev/Anonymity Network]] for details) — it's essential not to view Tor in isolation. We MUST consider its entire TCB ([https://en.wikipedia.org/wiki/Trusted_computing_base Trusted Computing Base]). If any component of the TCB is compromised, the Tor process can be undermined. For backdoor threats, the entire TCB is the attack surface, while for vulnerabilities, only the network-facing components of the TCB are.
:* '''{{project_name_gateway_long}} Hardware'''
:* '''GNU/Linux/OS''': The kernel, essential userland, APT, and all software update packages provided by the OS distributor/vendor.
:* '''Tor itself'''
:* '''Build System & Virtualization''': The build system (e.g., gcc). Using Virtualization (as opposed to Physical Isolation) enlarges the TCB significantly. This includes:
:: Host Kernel
:: Host applications
:: Host software updater
:: Virtualization software

; '''Software Dependencies & Functions''':
: It's CRUCIAL that the software we employ doesn't exceed its necessary functions, as this might compromise our anonymity through protocol leaks, identity correlation via Tor circuit sharing, and fingerprinting. To ensure this, we also depend on the {{project_name_workstation_long}} and the TCB of the applications we utilize. (For more details, see [{{project_name_long}} Protocol-Leak-Protection and Fingerprinting-Protection]).

; '''Confidentiality, Integrity, and Authenticity''':
: To guarantee these, we (and this includes everyone, not just {{project_name_long}}) rely far too heavily on TLS (Transport Layer Security, the "s" in https). We also depend on:
:* The entire Host (both Hardware and Software)
:* All software within {{project_name_workstation_long}}
:* TLS/PKI infrastructure
:* For onion services: The full location/identity TCB.
:* The security of the entity you're communicating with, unless employing symmetric key cryptography where you possess the exclusive key.

; '''Availability of Information''':
: Our dependencies include:
:* The reliability and connectivity of the upstream internet provider
:* The Tor network's ability to withstand DoS attacks
:* The resistance of the webservers you access to DoS assaults
:* Your system's capability to resist DoS attacks.

== Applying the threat model to {{project_name_long}} ==

First, you don't want to be on the "high profile target" list of any resourceful adversaries. If you are, neither {{project_name_long}} nor any other computer-based system can protect you.

{{project_name_long}} is primarily a software project. Our scope for hardware and physical aspects is limited. Hardware security wouldn't be as significant an issue if we weren't dealing with monolithic systems where multiple parts have full system access through DRM or indirectly via hardware drivers that run in kernel space. Consider examining Qubes OS for cutting-edge hardware deprivileging. While it requires modern hardware and a larger user base, integrating {{project_name_long}} with Qubes OS was done in form of [[Qubes-Whonix]].

Assuming the hardware is trustworthy and the physical location uncompromised, it's RECOMMENDED to use "clean" computers with parts from reputable manufacturers and to make purchases in cash to prevent hardware IDs from revealing our identity.

For forensic analysis protection, full disk encryption SHOULD be used on the host, and RAM should be wiped upon shutdown.

* Implementation status: Since {{project_name_long}} doesn't yet include a host operating system, we RECOMMEND users follow the guidelines provided in the {{project_name_long}} documentation.

Some additional pointers:

* Favor IOMMU over DMA, and avoid attaching untrusted devices to FireWire and PCI* interfaces.
* Opt for open-source hardware or at least hardware that's open-source friendly, meaning they make specifications public. With open source, multiple companies can produce the hardware, making backdoors more challenging to introduce.
* Embrace simplicity. Complexity is security's primary adversary. {{project_name_gateway_long}} could operate on straightforward hardware like the Raspberry Pi.

Regarding cryptography, the approach we can take is to use [https://en.wikipedia.org/wiki/Multiple_encryption cascades] of varying cipher and hash families. However, it's more intricate than it seems, and no known software achieves this correctly.

As mentioned in the "Attacker capabilities" section, our main area of focus should be software attacks.

To defend against software backdoors and vulnerabilities:

* The source needs to be audited, preferably by yourself and many others and should ideally be bug free. Popular open source projects are your best bet. {{project_name_long}} is fully open source, anyone can audit and patch.<br />
* If you rely on others (you do), you need to make sure that you get the same code as everyone else Hash sums + signatures, the more public they are, the better. If completely transparent signing is used (as common in proprietary systems) it is much more difficult to determine that you get the same files as everybody else. By default signing is only concerned with making sure that you get code by someone with access to the key. This protects against 3rd parties but not insiders. Checksums and signatures of {{project_name_long}} and updates are publicly available.
* The code you use SHOULD have a good track record, know issues must be corrected immediately. Code that doesn't get checked but has zero known problems is worse than code that has hundreds of known and patched security issues but is constantly being reviewed and worked on. However, a trustworthy code should have very few if any security issues despite having been audited thoroughly. After all, projects that constantly need security patches are constantly insecure. But it is not really about numbers, check the severity of the bugs. Linux needs many security patches but fatal flaws that would affect {{project_name_long}} are few and far between (i.e. remote code execution with root privileges). Fatal flaws in user facing applications (like browsers, pdf readers, media players, IRC) are frequent and therefore such software is not be part of the TCB (see below).
* Checking the source is not enough, you need trustworthy binaries. Analyzing binaries is a lot more difficult than analyzing source code. If you rely on source code auditing you absolutely REQUIRE a trustworthy compiler (and a complete trusted system to run it on) and use [https://dwheeler.com/trusting-trust/ DCC]. Similarly you already need a trusted system to check signature and hashes. This is the bootstrapping chicken and egg problem we mentioned earlier. Generally, to address it you need to use at least two different diverse systems that are completely independent (includes their parent build system and compiler) and set up the system in such a way that both would have to be compromised by the same adversary in a compatible way in order to result in a fatal security breach.

If the code base is huge and complex code auditing is not a realistic strategy, therefore we need to reducing complexity and attack surface by:

* making the TCB small and
* using privilege separation: The TCB for identity/anonymity is as small as it gets on a monolithic general purpose OS. It could be smaller (e.g. a custom kernel, busybox, uclibc instead of libc and gnu-utils) but that comes at the cost of maintainability, security updates and ease of use. (And still leaves us with a comparably huge monolithic kernel and a gigantic gcc infrastructure.) Linux/Xorg (with DAC or even MAC) is not very good with privilege separation (e.g. no trusted path). The strongest privilege separation is offered by using multiple physical computers, that's what we RECOMMEND, [[Dev/Build_Documentation/Physical_Isolation|Physical Isolation]] and [[Multiple Whonix-Workstation|multiple {{project_name_workstation_long}}]]. The more practical, but less secure alternative is virtualization. For details about privilege separation between IRC/Browser/Clients and Tor see [[Dev/Technical Introduction]]

We've thought a lot about making {{project_name_long}} yet more secure but with the (free and open source) tools available today it doesn't seem possible. What we'd need is an isolation kernel, that would offer some strong guarantees of isolation between the different subsystems and ideally would be verified, so you don't have to worry about sophisticated backdoors (apart from the compiler, see "Trusting trust"/chicken and egg), software vulnerabilities and even some hardware backdoors and vulnerabilities (through IOMMU and microkernel design one can put hardware and firmware components, apart from the CPU, out of the TCB). For Fingerprint/Protocol leaks and the [https://en.wikipedia.org/wiki/CIA_triad#Key_concepts CIA Triad] we are depending on the {{project_name_workstation_long}} TCB. This is a hopelessly large TCB/attack surface. For this reason we use yet another approach which can be called "security through non-persistence". That is, you should extensively make use of the clone feature and roll back of the virtual machine. Instead of privilege separation within a Tor-Workstation (e.g. by using a Mandatory Access Control framework) which would come at great usability costs, we recommend to use the coarse-grained isolation provided through multiple VMs (also see [[Advanced_Security_Guide#About_grsecurity]]).

To protect against software attacks (vulnerabilities) in particular:

* make software hard to attack ASLR, canaries, NX, kernel hardening, (See the Debian section [[Dev/Operating_System#Debian|About Debian]]. Note that this makes attacks "harder" but not impossible. Hardening is no replacement for fixing bugs. In a really trustworthy system hardening would not be necessary.

To mitigate Design flaws, the primary strategy is eliminating single points of failure. You SHOULD NOT rely on Tor alone, use wifi or tunnel through another system running VPN. You SHOULD NOT rely on TLS alone, use GPG as well (and vice versa). You SHOULD NOT rely on a software monoculture, you SHOULD NOT have to rely on Debian infrastructure to never be compromised. We are currently guilty of not following this advice. To lessen the impact of a potential compromise of the update infrastructure (which includes developer machines, build systems, key security and cryptographic primitives like PRNG - remember openssl or Flame?) we do not enable automatic software updates. After all, they are essentially remote root level backdoors (although with some checks in place).

== Notes about securing Confidentiality, Integrity and Authenticity ==

This is no different than in any other computer system without Tor. You MUST use end to end public key encryption, there is not really an alternative to that. But there are alternative implementations: TLS, SSH, GPG... End-to-End means, both ends need to be secure, one end is the {{project_name_workstation_long}}, which you can control and secure. In case of onion services, the {{project_name_gateway_long}} is ALSO part of the TCB!

{{project_name_workstation_long}} is not specifically hardened because hardening a Desktop system to a degree that makes it actually secure against a serious adversary makes the system unusable. Instead we follow the nuke and restore approach, see [[Multiple Whonix-Workstation|Multiple {{project_name_workstation_long}}]] and [[Security_Guide#Recommendation_to_use_multiple_VM_Snapshots|Recommendation to use multiple Snapshots]].

About Availability: The most resilient approach is probably a distributed data store, like Tahoe-LAFS or Freenet. I2P offers multi-homing built in. For Tor we don't know of any solutions ready for general usage.

== Notes about End-to-end security of Onion Services ==

Moved to [[Onion_Services#Notes_about_End-to-end_Security_of_Onion_Services|Notes about End to end Security of Onion Services]]

== Attack on {{project_name_long}} ==

There is a comparison of Tor Browser, Tails, {{project_name_long}} Standard/Download version (host+VM+VM) and {{project_name_long}} with Physical Isolation in chapter [[Comparison_with_Others#Attacks|Attacks against {{project_name_long}}]].

== Design Document, innovations and research ==

{{project_name_long}} developer adrelanos is also interested in serious design documents. There is only one design documents with respect to Tor, transparent/isolated proxying, isolation and Virtual Machines. Adrelanos has read the old design paper "A Tor Virtual Machine Design and Implementation" from 2009. After reading, adrelanos forked that paper, removed non-essential, non-security relevant stuff and made sure, all considerations from the old design paper, were implemented into {{project_name_long}}.

The whole {{project_name_long}} [[Documentation]] and [[Design]] supersede the old design document. Also the [https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TorifyHOWTO TorifyHOWTO] is co-maintained by adrelanos.

Also the following documents are being monitored.

* [https://tails.boum.org/contribute/index.en.html Tails Design]
* [https://tails.boum.org/contribute/design/ Tails Design: specification and implementation]
* [https://dee.su/liberte-security Security and Anonymity in Liberté Linux] ([https://archive.ph/srdCd archive.ph])
* [https://dee.su/liberte-motivation Liberté Linux Motivation and Philosophy] ([https://archive.ph/https://dee.su/liberte-motivation archive.ph])

If there are any security/privacy/anonymity updates they will be considered for {{project_name_long}}.

The {{project_name_long}} project also enjoys asking good questions, providing useful suggestions and creating useful things.

The following list is to keep track of all discussions and to review them in the future again, to see if something has changed.

* Smarm created serious [[Dev/Leak Tests Old]], which have been scripted by adrealanos (see [[Dev/Leak Tests]]) and which are potentially useful for other projects as well.
* [https://web.archive.org/web/20170222032855/https://mailman.boum.org/pipermail/tails-dev/2012-June/001245.html Tails-dev Removing SSL CA dependency for HTP]
* [https://gitlab.torproject.org/legacy/trac/-/wikis/doc/torsocks Modified usewithtor to support setting ip and port by command line parameter by adrelanos]
* [https://gitlab.torproject.org/legacy/trac/-/issues/5928 Research: IP discovery through Tor behind isolated network]
* [https://gitlab.torproject.org/legacy/trac/-/issues/5611 Enhance "Transparent Torification (Requires custom transproxy or Tor router)" in Tor Button.]
* Read [[Dev/Archived Discussions]] and also read the archives. We don't just do things. Everyone is invited to add some points and then we try to make the best decision.
* [https://lists.torproject.org/pipermail/tor-talk/2012-May/024227.html tor-talk Tor Browser disabling Javascript anonymity set reduction]
* [https://lists.torproject.org/pipermail/tor-talk/2012-March/023535.html tor-talk Awareness for identity correlation through circuit sharing is almost zero.]; [https://gitlab.torproject.org/legacy/trac/-/issues/6102 Add warning related to Identity correlation through circuit sharing]
* [https://lists.torproject.org/pipermail/tor-talk/2012-March/023486.html tor-talk Operating system updates / software installation behind Tor Transparent Proxy]
* [https://lists.torproject.org/pipermail/tor-talk/2012-August/025128.html tor-talk Attack against Tor: Statistic Manipulation Attack]
* [https://web.archive.org/web/20170222032804/https://mailman.boum.org/pipermail/tails-dev/2012-July/001394.html Tails-dev tails_htp: exit relay can fingerprint Tails users until exit relay is changed]; [https://web.archive.org/web/20170222032556/https://mailman.boum.org/pipermail/tails-dev/2012-August/001421.html 2]
* [https://web.archive.org/web/20170222032726/https://mailman.boum.org/pipermail/tails-dev/2012-August/001436.html Tails-dev better IRC client, include HexChat]
* [https://web.archive.org/web/20141005211329/https://mailman.boum.org/pipermail/tails-dev/2012-August/001422.html Tails-dev separate Tor streams]
* ...

This list is incomplete...

== {{project_name_long}} Threat Model not available as pdf or paper version ==
You may skip this optional chapter.

While we read real papers, like the [https://svn.torproject.org/svn/projects/design-paper/tor-design.pdf Onion routing design paper] and many others, we can't be coerced into creating a paper "Designing an anonymous operating system" with latex as pdf.

Like Mike Perry, developer of Tor Browser [https://lists.torproject.org/pipermail/tor-talk/2012-May/024405.html said] "''I find the pdf format heavy and unnerving from a security perspective.''". That also goes for us and we also find the pdf format inconvenient. It would also take us some time to learn latex, pdf creation, formatting etiquette and so on. Time, which we rather invest into improving the design, developing and so on. The "Onion routing design paper" is now also outdated and we rather have an editable, often updated and revised website compared to a paper/pdf.

Tails does also not have a design paper as pdf and still lots of users and developers. Also TrueCrypt had not design paper about plausible deniability and still got reviewed by Bruce Schneier et al. Therefore we really don't see the benefits of having the threat model available as pdf, but if we have overlooked something, please don't hesitate telling us.

= Footnotes =
<references />

{{Footer}}

[[Category:Design]]