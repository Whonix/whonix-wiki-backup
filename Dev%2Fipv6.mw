{{Header}}
{{title|title=
IPv6 Development
}}
{{#seo:
|description=Development notes for adding IPv6 support to {{project_name_short}}.
}}
<div class="mininav">
* [[IPv6|IPv6 - User Documentation]]
* [[Dev/ipv6|IPv6 - Developers]]
</div>
{{intro|
Development notes for adding IPv6 support to {{project_name_short}}.
}}
= Essential Knowledge =
* Tor 6to4: Tor is capable of tunneling IPv6 over IPv4. Even if your ISP does not support IPv4, the user will still be able to reach IPv6 destinations. Tor will build circuits over IPv4. However, IPv6 traffic is tunneled through IPv4. There is no need to have functional IPv6 support for clearnet just to be able to reach IPv6 destinations over Tor.
* Qubes specific.
** https://www.qubes-os.org/doc/networking/#limitations
*** <blockquote>Currently only IPv4 DNS servers are configured, regardless of ipv6 feature state. It is done this way to avoid reconfiguring all connected qubes whenever IPv6 DNS becomes available or not. Configuring qubes to always use IPv6 DNS and only fallback to IPv4 may result in relatively long timeouts and poor usability. But note that DNS using IPv4 does not prevent to return IPv6 addresses. In practice this is only a problem for IPv6-only networks.</blockquote>
** Qubes IPv6 only mode bug: [https://github.com/QubesOS/qubes-issues/issues/9288 Fix IPv6 connectivity on downstream qubes]
** Qubes [https://github.com/QubesOS/qubes-issues/issues/10038 IPv6 DNS support]

= IPv6 Support in Whonix =
IPv6 support are multiple parts.

* '''A)''' Whonix-Workstation connecting to Whonix-Gateway using IPv6.
** The following pull requests implement this:
*** https://github.com/Whonix/anon-ws-disable-stacked-tor/pull/2 (merged)
*** https://github.com/Whonix/anon-gw-anonymizer-config/pull/5 (merged)
*** https://github.com/Whonix/whonix-gw-network-conf/pull/1 (merged)
*** https://github.com/Whonix/qubes-whonix/pull/2 (merged)
*** https://github.com/Whonix/whonix-firewall/pull/10 (merged)
*** https://github.com/Kicksecure/helper-scripts/pull/10 (merged)
*** https://github.com/Whonix/whonix-ws-network-conf/pull/1 (merged)
*** https://gitlab.torproject.org/tpo/core/torsocks/-/merge_requests/17 (not yet merged)
* '''B)''' Tor proxying connections to IPv6 destinations.
** Already functional with Tor Browser.
*** NOTE: ISP IPv6 feature state does not matter. Tor does not require functional IPv6 by the ISP to be able to proxy/tunnel IPv6. Tor can tunnel IPv6 over IPv4.
** curl: A wrapper exists in Whonix 18 and higher that automatically directs curl to use a Tor proxy with stream isolation. Functional with both IPv4 and IPv6 addresses. Does not use torsocks, as curl IPv6 is incompatible with torsocks due to attempting to resolve DNS on its own.<ref>https://gitlab.torproject.org/tpo/core/torsocks/-/merge_requests/17#note_3174039</ref>
** transparent proxying: Implemented once above pull requests are merged.
* '''C)''' Tor using IPv6 to build Tor circuits.
** Implemented once above pull requests are merged.

= Whonix TODO =
* Whonix
** In file [https://github.com/Whonix/anon-gw-anonymizer-config/blob/master/etc/sysctl.d/anonymizer-config-gateway.conf <code>/etc/sysctl.d/anonymizer-config-gateway.conf</code>] comment out <code>net.ipv6.conf.all.disable_ipv6 = 1</code>.
* Use [https://en.wikipedia.org/wiki/Unique_local_address ULA (unique local address)]?
** [https://github.com/QubesOS/qubes-issues/issues/7803 IPV6: Use GUA (Global Unicast Addresses) or reserved addresses instead of ULA (Unique Local Unicast Addresses) within Qubes]
** GUA might have a higher risk for leaks?
** We should avoid depending on reserved addresses because their status could be changed in the future (while we aren't keeping tracking of this anymore) and we'd run into unexpected behavior or leakage.
** At least ULAs designed to do what we want them to do and will remain as such.
** Solution? Keep using ULA but use one of the workaround from above ticket?
* Use IPv4 mapped IPv6 addresses?
** <code>/etc/network/interfaces</code>

<pre>
iface eth0 inet6 static
    address ::FFFF:192.168.0.1
    netmask 96
</pre>

* Non-Qubes-Whonix
** Whonix-Gateway: https://github.com/Whonix/whonix-gw-network-conf/blob/master/etc/network/interfaces.d/30_non-qubes-whonix
** Whonix-Workstation: https://github.com/Whonix/whonix-ws-network-conf/blob/master/etc/network/interfaces.d/30_non-qubes-whonix
* Qubes-Whonix
** temporarily during development in dom0: {{CodeSelect|code=
qvm-features sys-whonix ipv6 1
}}
** '''TODO:''' Send a pull request to Qubes salt to no longer run command <code>qvm-features sys-whonix ipv6 ""</code> or maybe <code>qvm-features sys-whonix ipv6 0</code>.
** '''TODO:''' Qubes IPv6 migration difficulty.
*** When enabling Qubes host virtualizer setting <code>qvm-features sys-whonix ipv6 1</code>, then sys-whonix network will fail to come up as long as <code>sysctl net.ipv6.conf.all.disable_ipv6=1</code> is set.
*** Vice versa, when enabling sysctl <code>sysctl net.ipv6.conf.all.disable_ipv6=1</code> in sys-whonix without enabling Qubes host virtualizer setting <code>qvm-features sys-whonix ipv6 1</code>, networking will also fail to come up.
*** This makes migration very difficult.
*** TODO: patch Qubes upstream to simplify this so networking does not fail just because of IPv6 disabled/enabled on host VM settings but not disabled/enabled inside VM sysctl settings
** '''TODO:''' https://forum.qubes-os.org/t/qubes-4-3-cannot-create-a-new-appvm-that-provides-network-to-other-qubes/30906

= VirtualBox =
* VirtualBox NAT previously didn't support IPv6. It only provided an IPv4 address which we configured statically in <code>etc/network/interfaces.d/30_non-qubes-whonix</code>. As of 2025-09-17, with VirtualBox 7.2.2, IPv6 NAT is now available and fully functional in VirtualBox.
** A previous workaround when IPv6 NAT was not available was to switch the Gateway network to use a Bridged Adapter to the hosts network interface. This however exposes the Gateway to the hosts network. To allow IPv6 packages reaching the VM, Promiscuous mode needs to be changed to "Allow All". Since IPv6 is now supported, this is not necessary and probably not desirable.
* We need to add an address to our network configuration in <code>etc/network/interfaces.d/30_non-qubes-whonix</code> or let it automatically be configured, such as with <code>iface eth0 inet6 auto</code>. This has been tested and works as expected, without requiring DHCP (SLAAC is used to automatically configure an IPv6 address and routing).

= Libvirt =
* On the gateway, the network XML configuration needs to be modified to add an additional IPv6 address, IPv6 NAT has to be explicitly enabled, and the <code><dns enable="no"/></code> line must be removed as it breaks SLAAC autoconfiguration. Example:

 <network>
   <name>Whonix-External</name>
   <forward mode='nat'>
     <nat ipv6='yes'/>
   </forward>
   <bridge name='virbr1' stp='on' delay='0'/>
   <dns enable="no"/>
   <ip address='10.0.2.2' netmask='255.255.255.0'/>
   <ip family="ipv6" address="fd19:c33d:98bc::" prefix="64"/>
 </network>
* We need to add the same address also to our network configuration in <code>etc/network/interfaces.d/30_non-qubes-whonix</code>
 auto eth0
 iface eth0 inet6 static
        address fd19:c33d:98bc::15
        netmask 64
        gateway fd19:c33d:98bc::
* Or we can rely on autoconfiguration / SLAAC:
 auto eth0
 iface eth0 inet6 auto
* On the host it may be necessary to allow forwarding of IPv6 traffic for the desired network on the firewall. The necessary rules may or may not be added by libvirt automatically, though they seem to be added properly in Ubuntu 24.04 at least. Here an example configuration for ip6tables created by libvirt:
 -A LIBVIRT_FWI -d fd19:c33d:98bc::/64 -o virbr1 -j ACCEPT
 -A LIBVIRT_FWI -o virbr1 -j REJECT --reject-with icmp6-port-unreachable
 -A LIBVIRT_FWO -s fd19:c33d:98bc::/64 -i virbr1 -j ACCEPT
 -A LIBVIRT_FWO -i virbr1 -j REJECT --reject-with icmp6-port-unreachable
 -A LIBVIRT_FWX -i virbr1 -o virbr1 -j ACCEPT
* On the host we also need to enable forwarding of IPv6 with <code>sysctl net.ipv6.conf.all.forwarding=1</code>

= Tor Browser =
As for Tor Browser version 14.0.7 reads its environment variables on first start and makes one-time-only persistent changes to its about:config info. No indication at time of writing that this will change in future versions.

= Tor IPv6 Configuration =
{{CodeSelect|code=
sudo nano /etc/tor/torrc
}}

{{CodeSelect|code=
SocksPort [::1]:9050
}}

{{CodeSelect|code=
sudo systemctl restart tor
}}

* [https://tor.stackexchange.com/questions/24029/how-to-listen-on-both-localhost-ipv4-and-ipv6-at-the-same-time-with-1-configura How to listen on both localhost, IPv4 and IPv6 at the same time with 1 configuration line?]
* [https://gitlab.torproject.org/tpo/core/tor/-/issues/40952 document how to listen on localhost on both, IPv4 and IPv6 at the same time using SocksPort *:Port]

Note: If localhost on the system (inside the VM) does not have IPv6 support, Tor will fail to start.

<pre>
[warn] Could not bind to ::1:9050: Cannot assign requested address
[warn] Failed to parse/validate config: Failed to bind one of the listener ports.
[err] Reading config failed--see warnings above.
</pre>

= Functional =
Definitions:

* broken ISP IPv6: Your ISP does not provide IPv6. Visiting IPv6 pages are broken.

Overview:

* broken ISP IPv6 + Debian + Tor IPv6 Configuration (see above) + <code>curl --ipv6</code> + IPv6 localhost
** using IP (without DNS)
*** Using v6.ipv6test.app, '''NOTE:''' blocks Tor sometimes, not reliable
**** {{CodeSelect|code=
curl.anondist-orig --ipv6 --proxy socks5h://[::1]:9050 --resolve v6.ipv6test.app:443:[2600:9000:21f3:1800:18:3c03:3680:93a1] https://v6.ipv6test.app/
}}
*** Using ipify.org, seems to not block Tor at least sometimes
**** {{CodeSelect|code=
curl.anondist-orig --ipv6 --proxy socks5h://[::1]::9050 --resolve api6.ipify.org:443:[2607:f2d8:1:3c::4] https://api6.ipify.org/
}}
** using DNS
*** Using v6.ipv6test.app, '''NOTE:''' blocks Tor sometimes, not reliable
**** {{CodeSelect|code=
curl.anondist-orig --ipv6 --proxy socks5h://[::1]:9050 https://v6.ipv6test.app/
}}
*** Using ipify.org, seems to not block Tor at least sometimes
**** {{CodeSelect|code=
curl.anondist-orig --ipv6 --proxy socks5h://[::1]::9050 https://api6.ipify.org/
}}
** example output: <code>2a0b:f4c2:1::1</code>
*** an IP address of a Tor IPv6 exit relay. Can be verified using [[ExoneraTor|ExoneraTor]] ([https://metrics.torproject.org/exonerator.html?ip=2a0b%3Af4c2%3A1%3A%3A1&timestamp=2024-06-04&lang=en example]).
* broken ISP IPv6 + Debian + Tor Browser + IPv6-only test page
* broken ISP IPv6 + Whonix-Workstation + Tor Browser + IPv6-only test page

Notes:

* Tor <code>SocksPort</code> configuration option <code>IPv6Traffic</code> is optional, not required.
* Find out the IP address of an IPv6 test server. Requires functional IPv6 connectivity somewhere.
** {{CodeSelect|code=
nslookup v6.ipv6test.app
}}
*** <code>2600:9000:21f3:1800:18:3c03:3680:93a1</code>

= TODO Test =

* functional ISP IPv6 + Debian + <code>curl --ipv6</code> + IPv6 via IP only (without DNS)
** useful for testing if IP connectivity is functional while exluding potential DNS related issues
** {{CodeSelect|code=
curl --ipv6 --resolve v6.ipv6test.app:443:[2600:9000:21f3:1800:18:3c03:3680:93a1] https://v6.ipv6test.app/
}}

= IPv6-only test pages =
These are <u>only</u> reachable over IPv6. Not over IPv4 at all. This makes these test pages ideal for testing.

* https://v6.ipv6test.app/

= Test Scenario =
After full IPv6 support has been added to Whonix, the following test might be ideal to test if IPv6 is fully functional.

IPv6 only ISP simulation:

* Disable IPv4 either:
** A) on the router or,
** B) alternatively, in case of Non-Qubes-Whonix alternatively on the host operating system.
** C) alternatively, in case of Qubes-Whonix use a VM <code>sys-ipv4-breaker</code> (A ProxyVM that disables IPv4 using sysctl)

= Discussion =
* [https://forums.whonix.org/t/add-ipv6-support/19893 add IPv6 support]
* [https://github.com/QubesOS/qubes-issues/issues/9267 add IPv6 support to Qubes-Whonix]

[[Category:Development]]
{{Footer}}