/*
TabContentController Gadget - JS Initialisation, Setup, Events
See detailed documentation in Dev/mediawiki
deferrable:YES -- This is a standalone gadget / augmentation
*/

/* See Dev/mediawiki for documentation */

/*
Important definitions for Devs
------------------------------
controller = container where the navigation and the content-container
navigaton = the mininav container for the tab item list
tabContainer = the li element housing the tab
tab = the link element to navigate to the corresponding content item
sectionList = the collection of the actual content (section) for each tab
section = the actual content for an individual tab
content = meta concept meaning both section and the corresponding tab
*/

(function() {
	
	// ---------------------------------------
	// jQuery extension : tabContentController
	
	$.fn.tabContentController = function(action) {
		
		// Only allow 'init' at the moment (extendable later)
		if( action != 'init' ) return;
		
		// Traversing over the given collection
		
		let collection = $(this).filter('.tab-content-controller');
		
		collection.each( function() {
			
			// Prevent double initialization
			if( $(this).hasClass('js-fully-loaded') ) return;
			
			// Setup
			
			// For linked Controllers : ID of the tab controller group
			let tcLinkedGroupId = $(this).attr( 'data-tcc-linkid' );
			// If no link id then "group" is just this controller
			let tcLinkedGroup = tcLinkedGroupId ? collection.filter( (index,element) => $(element).attr( 'data-tcc-linkid' ) == tcLinkedGroupId ) : $(this);
			
			tcLinkedGroup.each( function() {
				
				// Apply dark feature via tcc-dark class
				if( $(this).hasClass('tcc-dark') ) $(this).find('> .mininav').addClass('mn-dark');
				
				$(this).find('> .mininav').append('<ul></ul>')
				let tabList = $(this).find('.mininav > ul');
				
				$(this).find('> .tcc-content > .tcc-section').each( function( index, element ) {
					
					let section = $(this);
					
					// Create tab. All are links but disabled. If only link given in section then create direct link-tab (with .is-link class)
					let tabContainer = $( `<li><a href="${ window.location.href.split('#')[0] + '#' + section.find('.tcc-title .mw-headline').attr('id') }"></a></li>` );
					// If the section's content has exactly 1 child, that is a p, and that p has 1 child (and no text nodes) that is an a. Whitespaces are trimmed for caparison
					if( section.find('> .tcc-content > p > a').length == 1 && section.find('> .tcc-content > p').text().trim() == section.find('> .tcc-content > p > a').text() ) {
						tabContainer = $( `<li><a class="is-link" href="${section.find('> .tcc-content > p > a').attr('href')}"></a></li>` );
						section.addClass('is-link');
					}
					let tab = tabContainer.children().first();
					
					tab.text( section.find('> .tcc-title .mw-headline').text() );
					if( section.hasClass('active') ) tab.addClass('active');
					if( section.find('> .tcc-image img').length > 0 ) tab.prepend( section.find('> .tcc-image img') );

					// Creating or fetching contentId (from linked Controller) and applying it to tab and section
					let contentId = 'id-' + Math.random().toString().substr(2);
					let existingContent = $(`[data-tcc-linkid="${tcLinkedGroupId}"].js-fully-loaded`).eq(0).find('.tcc-section').eq( index );
					if( existingContent.length > 0 ) contentId = existingContent.eq(0).attr('data-tcc-contentId');
					tab.attr( 'data-tcc-contentId', contentId );
					section.attr( 'data-tcc-contentId', contentId );
					
					tabList.append( tabContainer );
					
					// Event : Click
					if( ! tab.hasClass('is-link') ) tabContainer.on( 'click', (e) => {
						e.preventDefault();
						chooseTab( tab.attr('data-tcc-contentId') );
						return false;
					});
					
				});
					
				// If no element is active make the first one active that is not a link
				if( ! $(this).find('.tcc-section').hasClass('active') ) {
					chooseTab( tabList.find('a:not(.is-link)').eq(0).attr('data-tcc-contentId') );
				}
				
				$(this).addClass('js-fully-loaded');
			});
			
			function chooseTab( contentId ) {
				tcLinkedGroup.find('> .mininav > ul > li > *').removeClass('active');
				tcLinkedGroup.find('> .tcc-content > .tcc-section').removeClass('active');
				tcLinkedGroup.find(`[data-tcc-contentId="${contentId}"]`).filter( (index,element) => ! $(element).hasClass('is-link') ).addClass('active');
			}
	
		});
			
	}
	
	// -------------------
	// Page Initialization
	
	// Automatic initialization for all tab controllers
	$('.tab-content-controller').tabContentController('init');
	
	// Using Hash to control tabs
	let hash = window.location.hash.substring(1);
	let selectedHeadline = $( `.tab-content-controller .tcc-title .mw-headline[id="${hash}"]` );
	// If section with hash as headline ID is found open this section/tab and all parent sections/tabs
	if( selectedHeadline.length > 0 ) {
		selectedHeadline.parents('.tcc-section').each( (index,sectionDom) => {
			let selectedId = $(sectionDom).attr('data-tcc-contentid');
			$(sectionDom).parents('.tab-content-controller').eq(0).find( `.mininav [data-tcc-contentid="${selectedId}"]` )[0].click();
		});
		// And scroll to the position of the direct content controller parent in the document
		$('html, body').animate( { scrollTop: selectedHeadline.parents('.tab-content-controller')[0].getBoundingClientRect().top - 70  }, 500 );
	}
	
})();

/*
[[Category:MultiWiki]]
*/